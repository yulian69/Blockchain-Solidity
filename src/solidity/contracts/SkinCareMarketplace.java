package solidity.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.4.0.
 */
public class SkinCareMarketplace extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b5060405160208061396783398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614e206008819055505061389a806100cd6000396000f300608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806310fe9ae81461010c5780631ef968be1461016357806326a4e8d21461024057806341c0e1b5146102835780634c96f0cc1461029a5780637ee454cb146102b157806387cc5a1c1461031d5780638da5cb5b146103fa5780638e57d12b146104515780638f4ffcb1146104ba57806390d349841461056d578063a9960f771461060c578063aa0372e714610692578063bec3fa171461074a578063cfecc57014610797578063d5e6c33314610822578063dd9c9ec41461089f578063e4c617601461093e578063f2fde38b146109a7575b600080fd5b34801561011857600080fd5b506101216109ea565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561016f57600080fd5b506101926004803603810190808035600019169060200190929190505050610a14565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102045780820151818401526020810190506101e9565b50505050905090810190601f1680156102315780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561024c57600080fd5b50610281600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a35565b005b34801561028f57600080fd5b50610298610ad4565b005b3480156102a657600080fd5b506102af610b71565b005b3480156102bd57600080fd5b506102c6610cf0565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156103095780820151818401526020810190506102ee565b505050509050019250505060405180910390f35b34801561032957600080fd5b5061034c6004803603810190808035600019169060200190929190505050610d4f565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156103be5780820151818401526020810190506103a3565b50505050905090810190601f1680156103eb5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561040657600080fd5b5061040f610d70565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561045d57600080fd5b506104b8600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610d95565b005b3480156104c657600080fd5b5061056b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610f12565b005b34801561057957600080fd5b506105826112aa565b60405180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105d05780820151818401526020810190506105b5565b50505050905090810190601f1680156105fd5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561061857600080fd5b5061063b60048036038101908080356000191690602001909291905050506112c0565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561067e578082015181840152602081019050610663565b505050509050019250505060405180910390f35b34801561069e57600080fd5b506106c1600480360381019080803560001916906020019092919050505061133c565b6040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b8381101561070d5780820151818401526020810190506106f2565b50505050905090810190601f16801561073a5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561075657600080fd5b50610795600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611362565b005b3480156107a357600080fd5b506108206004803603810190808035600019169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190929190505050611535565b005b34801561082e57600080fd5b5061089d600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001909291905050506116ce565b005b3480156108ab57600080fd5b506108b4611832565b60405180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b838110156109025780820151818401526020810190506108e7565b50505050905090810190601f16801561092f5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561094a57600080fd5b506109a5600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611848565b005b3480156109b357600080fd5b506109e8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061198f565b005b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006060610a2c836001611ae490919063ffffffff16565b91509150915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a9057600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b2f57600080fd5b610b37610b71565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bcc57600080fd5b610cee6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610cae57600080fd5b505af1158015610cc2573d6000803e3d6000fd5b505050506040513d6020811015610cd857600080fd5b8101908080519060200190929190505050611362565b565b60606001600501805480602002602001604051908101604052809291908181526020018280548015610d4557602002820191906000526020600020905b81546000191681526020019060010190808311610d2d575b5050505050905090565b60006060610d67836001611bf790919063ffffffff16565b91509150915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600180016000600160020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000191660001916815260200190815260200160002060030160009054906101000a900460ff161515610e1057600080fd5b610e24816001611d0a90919063ffffffff16565b600160020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600019167fb10aa2e1bad2eb5f0007a1376ac03f51cc69b5819e75c041f12fd8f70e0f01b982426040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610ed4578082015181840152602081019050610eb9565b50505050905090810190601f168015610f015780820380516001836020036101000a031916815260200191505b50935050505060405180910390a250565b818073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610f6f57600080fd5b6001825110151515610f8057600080fd5b60017f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916826001845103815181101515610fd857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561108457600854841015151561105c57600080fd5b61107f8561107a6000600186510386611d849092919063ffffffff16565b611e97565b6112a3565b60027f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168260018451038151811015156110dc57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561119d57602282511015151561116057600080fd5b6111988561117e6020602186510386611d849092919063ffffffff16565b61119260008661202390919063ffffffff16565b87612101565b6112a2565b60037f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168260018451038151811015156111f557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561129c57602182511015151561127957600080fd5b6112978561129160008561202390919063ffffffff16565b86612253565b6112a1565b600080fd5b5b5b5050505050565b600060606112b860016123d8565b915091509091565b6060600180016000836000191660001916815260200190815260200160002060020180548060200260200160405190810160405280929190818152602001828054801561133057602002820191906000526020600020905b81546000191681526020019060010190808311611318575b50505050509050919050565b606060008061135584600161250b90919063ffffffff16565b9250925092509193909250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113bd57600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561148257600080fd5b505af1158015611496573d6000803e3d6000fd5b505050506040513d60208110156114ac57600080fd5b8101908080519060200190929190505050507f97ec4221e100332f16992858c2a077cb15a88abfbe64ccffd4f95860f38f0d19828242604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15050565b8360016000016000826000191660001916815260200190815260200160002060040160009054906101000a900460ff1680156115db5750600160020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600019166001600001600083600019166000191681526020019081526020016000206003015460001916145b15156115e657600080fd5b61160085858585600161260690949392919063ffffffff16565b61160a600161265a565b6000191685600019167fda946981480da0d57ef76ec8b9c370027b0bd276ab1bee09fb1572c1f47aa16a868686426040518080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b8381101561168a57808201518184015260208101905061166f565b50505050905090810190601f1680156116b75780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a35050505050565b6000600180016000600160020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000191660001916815260200190815260200160002060030160009054906101000a900460ff16151561174b57600080fd5b61176384848460016126a5909392919063ffffffff16565b905061176f600161265a565b6000191681600019167f416a93d179776884be67bb2fa19a2712f74764aa004d11635f7dd37d5b8c96ef868686426040518080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b838110156117ef5780820151818401526020810190506117d4565b50505050905090810190601f16801561181c5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a350505050565b60006060611840600161292c565b915091509091565b3360016003016000600160040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000191660001916815260200190815260200160002060020160009054906101000a900460ff1615156118c557600080fd5b6118d9826001612a2690919063ffffffff16565b6118e36001612ac3565b600019167fa2f11d2b103204af102b3545496fde4805983ceb4742f238a382682ac69c606c83426040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611950578082015181840152602081019050611935565b50505050905090810190601f16801561197d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a25050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119ea57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a2657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060606000846001016000856000191660001916815260200190815260200160002090508060030160009054906101000a900460ff161515611b2657600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600101808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611be45780601f10611bb957610100808354040283529160200191611be4565b820191906000526020600020905b815481529060010190602001808311611bc757829003601f168201915b5050505050905092509250509250929050565b600060606000846003016000856000191660001916815260200190815260200160002090508060020160009054906101000a900460ff161515611c3957600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600101808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cf75780601f10611ccc57610100808354040283529160200191611cf7565b820191906000526020600020905b815481529060010190602001808311611cda57829003601f168201915b5050505050905092509250509250929050565b808260010160008460020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600019166000191681526020019081526020016000206001019080519060200190611d7f9291906136d1565b505050565b6060806000611d938585612b0c565b865110151515611da257600080fd5b836040519080825280601f01601f191660200182016040528015611dd55781602001602082028038833980820191505090505b509150600090505b83811015611e8b5785818601815181101515611df557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028282815181101515611e4e57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611ddd565b81925050509392505050565b81600180016000600160020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000191660001916815260200190815260200160002060030160009054906101000a900460ff16151515611f1457600080fd5b611f1d83612b2a565b611f3383836001612c649092919063ffffffff16565b600160020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600019167f3a551d0006ac1bc7bbf2b242df7a52278bc59722d566688182b1b2756556b47983426040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611fe3578082015181840152602081019050611fc8565b50505050905090810190601f1680156120105780820380516001836020036101000a031916815260200191505b50935050505060405180910390a2505050565b60008060008090505b60208110156120f6576008810260ff7f0100000000000000000000000000000000000000000000000000000000000000028683870181518110151561206d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600019169060020a900482179150808060010191505061202c565b819250505092915050565b600060016003016000600160040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000191660001916815260200190815260200160002060020160009054906101000a900460ff1615151561218057600080fd5b61219685856001612f809092919063ffffffff16565b905080600019167f8105f82178f618493395672145ec5209973bd5f624c5312b0312ac345c0a20e885426040518080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156122065780820151818401526020810190506121eb565b50505050905090810190601f1680156122335780820380516001836020036101000a031916815260200191505b50935050505060405180910390a261224c858484612253565b5050505050565b6000808460016003016000600160040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000191660001916815260200190815260200160002060020160009054906101000a900460ff1615156122d357600080fd5b6122f1866122eb87600161321890919063ffffffff16565b866132c8565b6123078585600161352f9092919063ffffffff16565b925061231d85600161361590919063ffffffff16565b9150610e104281151561232c57fe5b048260001916600160040160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600019167f2300335813a5dbefe6ddf5bb5a56544aa4d7c40c7f00c8fea1fc56fa68cbea7a8887894260405180856000191660001916815260200184815260200183815260200182815260200194505050505060405180910390a4505050505050565b600060606000808460040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150846003016000836000191660001916815260200190815260200160002090508060020160009054906101000a900460ff16151561245f57600080fd5b8181600101808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124f95780601f106124ce576101008083540402835291602001916124f9565b820191906000526020600020905b8154815290600101906020018083116124dc57829003601f168201915b50505050509050935093505050915091565b60606000806000856000016000866000191660001916815260200190815260200160002090508060040160009054906101000a900460ff16151561254e57600080fd5b8060000181600101548260020154828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125f15780601f106125c6576101008083540402835291602001916125f1565b820191906000526020600020905b8154815290600101906020018083116125d457829003601f168201915b50505050509250935093509350509250925092565b6000856000016000866000191660001916815260200190815260200160002090508381600001908051906020019061263f9291906136d1565b50828160010181905550818160020181905550505050505050565b60008160020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060003386600143034042604051602001808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140184805190602001908083835b60208310151561272b5780518252602082019150602081019050602083039250612706565b6001836020036101000a03801982511681845116808217855250505050505090500183600019166000191681526020018281526020019450505050506040516020818303038152906040526040518082805190602001908083835b6020831015156127ab5780518252602082019150602081019050602083039250612786565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209150866000016000836000191660001916815260200190815260200160002060040160009054906101000a900460ff1615151561281457600080fd5b61281d8761265a565b905060a060405190810160405280878152602001868152602001858152602001826000191681526020016001151581525087600001600084600019166000191681526020019081526020016000206000820151816000019080519060200190612887929190613751565b5060208201518160010155604082015181600201556060820151816003019060001916905560808201518160040160006101000a81548160ff02191690831515021790555090505086600101600082600019166000191681526020019081526020016000206002018290806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055508192505050949350505050565b6000606060008061293c8561265a565b9150846001016000836000191660001916815260200190815260200160002090508060030160009054906101000a900460ff16151561297a57600080fd5b8181600101808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612a145780601f106129e957610100808354040283529160200191612a14565b820191906000526020600020905b8154815290600101906020018083116129f757829003601f168201915b50505050509050935093505050915091565b60008260030160008460040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000191660001916815260200190815260200160002090508060020160009054906101000a900460ff161515612aa557600080fd5b81816001019080519060200190612abd9291906136d1565b50505050565b60008160040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002050919050565b6000808284019050838110151515612b2057fe5b8091505092915050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd82306008546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015612c2557600080fd5b505af1158015612c39573d6000803e3d6000fd5b505050506040513d6020811015612c4f57600080fd5b81019080805190602001909291905050505050565b60003382600143034042604051602001808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140184805190602001908083835b602083101515612ce75780518252602082019150602081019050602083039250612cc2565b6001836020036101000a03801982511681845116808217855250505050505090500183600019166000191681526020018281526020019450505050506040516020818303038152906040526040518082805190602001908083835b602083101515612d675780518252602082019150602081019050602083039250612d42565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050836001016000826000191660001916815260200190815260200160002060030160009054906101000a900460ff16151515612dd057600080fd5b6080604051908101604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020016000604051908082528060200260200182016040528015612e2e5781602001602082028038833980820191505090505b50815260200160011515815250846001016000836000191660001916815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190612ebb929190613751565b506040820151816002019080519060200190612ed89291906137d1565b5060608201518160030160006101000a81548160ff021916908315150217905550905050808460020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081600019169055508360050181908060018154018082558091505090600182039060005260206000200160009091929091909150906000191690555050505050565b6000808383600143034042604051602001808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140184805190602001908083835b6020831015156130045780518252602082019150602081019050602083039250612fdf565b6001836020036101000a03801982511681845116808217855250505050505090500183600019166000191681526020018281526020019450505050506040516020818303038152906040526040518082805190602001908083835b602083101515613084578051825260208201915060208101905060208303925061305f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050846003016000826000191660001916815260200190815260200160002060020160009054906101000a900460ff161515156130ed57600080fd5b6060604051908101604052808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200160011515815250856003016000836000191660001916815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906131a2929190613751565b5060408201518160020160006101000a81548160ff021916908315150217905550905050808560040160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208160001916905550509392505050565b6000806000846000016000856000191660001916815260200190815260200160002091508160040160009054906101000a900460ff16151561325957600080fd5b84600101600083600301546000191660001916815260200190815260200160002090508060030160009054906101000a900460ff16151561329957600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250505092915050565b60006132f160646132e3605f8561366290919063ffffffff16565b61369d90919063ffffffff16565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8530856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156133ec57600080fd5b505af1158015613400573d6000803e3d6000fd5b505050506040513d602081101561341657600080fd5b810190808051906020019092919050505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156134ed57600080fd5b505af1158015613501573d6000803e3d6000fd5b505050506040513d602081101561351757600080fd5b81019080805190602001909291905050505050505050565b600080600080866000016000876000191660001916815260200190815260200160002092508260040160009054906101000a900460ff16151561357157600080fd5b61358883600101548661369d90919063ffffffff16565b915060008211801561359e575081836002015410155b15156135a957600080fd5b86600101600084600301546000191660001916815260200190815260200160002090508060030160009054906101000a900460ff1615156135e957600080fd5b6136008284600201546136b890919063ffffffff16565b83600201819055508193505050509392505050565b600080836000016000846000191660001916815260200190815260200160002090508060040160009054906101000a900460ff16151561365457600080fd5b806003015491505092915050565b60008060008414156136775760009150613696565b828402905082848281151561368857fe5b0414151561369257fe5b8091505b5092915050565b60008082848115156136ab57fe5b0490508091505092915050565b60008282111515156136c657fe5b818303905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061371257805160ff1916838001178555613740565b82800160010185558215613740579182015b8281111561373f578251825591602001919060010190613724565b5b50905061374d9190613824565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061379257805160ff19168380011785556137c0565b828001600101855582156137c0579182015b828111156137bf5782518255916020019190600101906137a4565b5b5090506137cd9190613824565b5090565b828054828255906000526020600020908101928215613813579160200282015b828111156138125782518290600019169055916020019190600101906137f1565b5b5090506138209190613849565b5090565b61384691905b8082111561384257600081600090555060010161382a565b5090565b90565b61386b91905b8082111561386757600081600090555060010161384f565b5090565b905600a165627a7a72305820df878d82b83c45faa80ba8080d8088340c9d23e4d1d961dffcd598ddc1c807850029";

    public static final String FUNC_GETTOKENADDRESS = "getTokenAddress";

    public static final String FUNC_GETSELLERBYID = "getSellerById";

    public static final String FUNC_SETTOKENADDRESS = "setTokenAddress";

    public static final String FUNC_KILL = "kill";

    public static final String FUNC_TRANSFERALLTOKENS = "transferAllTokens";

    public static final String FUNC_GETSELLERS = "getSellers";

    public static final String FUNC_GETBUYER = "getBuyer";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_UPDATESELLER = "updateSeller";

    public static final String FUNC_RECEIVEAPPROVAL = "receiveApproval";

    public static final String FUNC_GETBUYERBYADDRESS = "getBuyerByAddress";

    public static final String FUNC_GETITEMS = "getItems";

    public static final String FUNC_GETITEM = "getItem";

    public static final String FUNC_TRANSFERTOKENS = "transferTokens";

    public static final String FUNC_UPDATEITEM = "updateItem";

    public static final String FUNC_ADDITEM = "addItem";

    public static final String FUNC_GETSELLERBYADDRESS = "getSellerByAddress";

    public static final String FUNC_UPDATEBUYER = "updateBuyer";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event ADDSELLER_EVENT = new Event("AddSeller", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPDATESELLER_EVENT = new Event("UpdateSeller", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ADDBUYER_EVENT = new Event("AddBuyer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPDATEBUYER_EVENT = new Event("UpdateBuyer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BUYITEM_EVENT = new Event("BuyItem", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ADDITEM_EVENT = new Event("AddItem", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPDATEITEM_EVENT = new Event("UpdateItem", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFERTOKENS_EVENT = new Event("TransferTokens", 
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
            Arrays.<TypeReference<?>>asList());
    ;

    protected SkinCareMarketplace(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SkinCareMarketplace(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<String> getTokenAddress() {
        final Function function = new Function(FUNC_GETTOKENADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<String, String>> getSellerById(byte[] sellerId) {
        final Function function = new Function(FUNC_GETSELLERBYID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sellerId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple2<String, String>>(
                new Callable<Tuple2<String, String>>() {
                    @Override
                    public Tuple2<String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setTokenAddress(String _tokenAddress) {
        final Function function = new Function(
                FUNC_SETTOKENADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> kill() {
        final Function function = new Function(
                FUNC_KILL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferAllTokens() {
        final Function function = new Function(
                FUNC_TRANSFERALLTOKENS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getSellers() {
        final Function function = new Function(FUNC_GETSELLERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple2<String, String>> getBuyer(byte[] buyerId) {
        final Function function = new Function(FUNC_GETBUYER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(buyerId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple2<String, String>>(
                new Callable<Tuple2<String, String>>() {
                    @Override
                    public Tuple2<String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> updateSeller(String ipfs) {
        final Function function = new Function(
                FUNC_UPDATESELLER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(ipfs)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> receiveApproval(String sender, BigInteger tokens, String _tokenAddrress, byte[] data) {
        final Function function = new Function(
                FUNC_RECEIVEAPPROVAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(sender), 
                new org.web3j.abi.datatypes.generated.Uint256(tokens), 
                new org.web3j.abi.datatypes.Address(_tokenAddrress), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<byte[], String>> getBuyerByAddress() {
        final Function function = new Function(FUNC_GETBUYERBYADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple2<byte[], String>>(
                new Callable<Tuple2<byte[], String>>() {
                    @Override
                    public Tuple2<byte[], String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], String>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<List> getItems(byte[] sellerId) {
        final Function function = new Function(FUNC_GETITEMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sellerId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple3<String, BigInteger, BigInteger>> getItem(byte[] itemId) {
        final Function function = new Function(FUNC_GETITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(itemId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple3<String, BigInteger, BigInteger>>(
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> transferTokens(String addr, BigInteger tokens) {
        final Function function = new Function(
                FUNC_TRANSFERTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr), 
                new org.web3j.abi.datatypes.generated.Uint256(tokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateItem(byte[] itemId, String ipfs, BigInteger price, BigInteger quantity) {
        final Function function = new Function(
                FUNC_UPDATEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(itemId), 
                new org.web3j.abi.datatypes.Utf8String(ipfs), 
                new org.web3j.abi.datatypes.generated.Uint256(price), 
                new org.web3j.abi.datatypes.generated.Uint256(quantity)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addItem(String ipfs, BigInteger price, BigInteger quantity) {
        final Function function = new Function(
                FUNC_ADDITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(ipfs), 
                new org.web3j.abi.datatypes.generated.Uint256(price), 
                new org.web3j.abi.datatypes.generated.Uint256(quantity)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<byte[], String>> getSellerByAddress() {
        final Function function = new Function(FUNC_GETSELLERBYADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple2<byte[], String>>(
                new Callable<Tuple2<byte[], String>>() {
                    @Override
                    public Tuple2<byte[], String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], String>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> updateBuyer(String ipfs) {
        final Function function = new Function(
                FUNC_UPDATEBUYER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(ipfs)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<SkinCareMarketplace> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _tokenAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress)));
        return deployRemoteCall(SkinCareMarketplace.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<SkinCareMarketplace> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _tokenAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress)));
        return deployRemoteCall(SkinCareMarketplace.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<AddSellerEventResponse> getAddSellerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDSELLER_EVENT, transactionReceipt);
        ArrayList<AddSellerEventResponse> responses = new ArrayList<AddSellerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddSellerEventResponse typedResponse = new AddSellerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sellerId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ipfs = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddSellerEventResponse> addSellerEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddSellerEventResponse>() {
            @Override
            public AddSellerEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDSELLER_EVENT, log);
                AddSellerEventResponse typedResponse = new AddSellerEventResponse();
                typedResponse.log = log;
                typedResponse.sellerId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ipfs = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<AddSellerEventResponse> addSellerEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDSELLER_EVENT));
        return addSellerEventObservable(filter);
    }

    public List<UpdateSellerEventResponse> getUpdateSellerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATESELLER_EVENT, transactionReceipt);
        ArrayList<UpdateSellerEventResponse> responses = new ArrayList<UpdateSellerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateSellerEventResponse typedResponse = new UpdateSellerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sellerId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ipfs = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UpdateSellerEventResponse> updateSellerEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, UpdateSellerEventResponse>() {
            @Override
            public UpdateSellerEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATESELLER_EVENT, log);
                UpdateSellerEventResponse typedResponse = new UpdateSellerEventResponse();
                typedResponse.log = log;
                typedResponse.sellerId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ipfs = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<UpdateSellerEventResponse> updateSellerEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATESELLER_EVENT));
        return updateSellerEventObservable(filter);
    }

    public List<AddBuyerEventResponse> getAddBuyerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDBUYER_EVENT, transactionReceipt);
        ArrayList<AddBuyerEventResponse> responses = new ArrayList<AddBuyerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddBuyerEventResponse typedResponse = new AddBuyerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.buyerId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ipfs = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddBuyerEventResponse> addBuyerEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddBuyerEventResponse>() {
            @Override
            public AddBuyerEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDBUYER_EVENT, log);
                AddBuyerEventResponse typedResponse = new AddBuyerEventResponse();
                typedResponse.log = log;
                typedResponse.buyerId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ipfs = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<AddBuyerEventResponse> addBuyerEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDBUYER_EVENT));
        return addBuyerEventObservable(filter);
    }

    public List<UpdateBuyerEventResponse> getUpdateBuyerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEBUYER_EVENT, transactionReceipt);
        ArrayList<UpdateBuyerEventResponse> responses = new ArrayList<UpdateBuyerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateBuyerEventResponse typedResponse = new UpdateBuyerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.buyerId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ipfs = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UpdateBuyerEventResponse> updateBuyerEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, UpdateBuyerEventResponse>() {
            @Override
            public UpdateBuyerEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEBUYER_EVENT, log);
                UpdateBuyerEventResponse typedResponse = new UpdateBuyerEventResponse();
                typedResponse.log = log;
                typedResponse.buyerId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ipfs = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<UpdateBuyerEventResponse> updateBuyerEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEBUYER_EVENT));
        return updateBuyerEventObservable(filter);
    }

    public List<BuyItemEventResponse> getBuyItemEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BUYITEM_EVENT, transactionReceipt);
        ArrayList<BuyItemEventResponse> responses = new ArrayList<BuyItemEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BuyItemEventResponse typedResponse = new BuyItemEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.buyerId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sellerId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.day = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.itemId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<BuyItemEventResponse> buyItemEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, BuyItemEventResponse>() {
            @Override
            public BuyItemEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BUYITEM_EVENT, log);
                BuyItemEventResponse typedResponse = new BuyItemEventResponse();
                typedResponse.log = log;
                typedResponse.buyerId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.sellerId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.day = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.itemId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<BuyItemEventResponse> buyItemEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BUYITEM_EVENT));
        return buyItemEventObservable(filter);
    }

    public List<AddItemEventResponse> getAddItemEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDITEM_EVENT, transactionReceipt);
        ArrayList<AddItemEventResponse> responses = new ArrayList<AddItemEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddItemEventResponse typedResponse = new AddItemEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.itemId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sellerId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.ipfs = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddItemEventResponse> addItemEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddItemEventResponse>() {
            @Override
            public AddItemEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDITEM_EVENT, log);
                AddItemEventResponse typedResponse = new AddItemEventResponse();
                typedResponse.log = log;
                typedResponse.itemId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.sellerId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.ipfs = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<AddItemEventResponse> addItemEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDITEM_EVENT));
        return addItemEventObservable(filter);
    }

    public List<UpdateItemEventResponse> getUpdateItemEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEITEM_EVENT, transactionReceipt);
        ArrayList<UpdateItemEventResponse> responses = new ArrayList<UpdateItemEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateItemEventResponse typedResponse = new UpdateItemEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.itemId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sellerId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.ipfs = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UpdateItemEventResponse> updateItemEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, UpdateItemEventResponse>() {
            @Override
            public UpdateItemEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEITEM_EVENT, log);
                UpdateItemEventResponse typedResponse = new UpdateItemEventResponse();
                typedResponse.log = log;
                typedResponse.itemId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.sellerId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.ipfs = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<UpdateItemEventResponse> updateItemEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEITEM_EVENT));
        return updateItemEventObservable(filter);
    }

    public List<TransferTokensEventResponse> getTransferTokensEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERTOKENS_EVENT, transactionReceipt);
        ArrayList<TransferTokensEventResponse> responses = new ArrayList<TransferTokensEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferTokensEventResponse typedResponse = new TransferTokensEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferTokensEventResponse> transferTokensEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferTokensEventResponse>() {
            @Override
            public TransferTokensEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERTOKENS_EVENT, log);
                TransferTokensEventResponse typedResponse = new TransferTokensEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<TransferTokensEventResponse> transferTokensEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERTOKENS_EVENT));
        return transferTokensEventObservable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventObservable(filter);
    }

    public static SkinCareMarketplace load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SkinCareMarketplace(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static SkinCareMarketplace load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SkinCareMarketplace(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class AddSellerEventResponse {
        public Log log;

        public byte[] sellerId;

        public String ipfs;

        public BigInteger timestamp;
    }

    public static class UpdateSellerEventResponse {
        public Log log;

        public byte[] sellerId;

        public String ipfs;

        public BigInteger timestamp;
    }

    public static class AddBuyerEventResponse {
        public Log log;

        public byte[] buyerId;

        public String ipfs;

        public BigInteger timestamp;
    }

    public static class UpdateBuyerEventResponse {
        public Log log;

        public byte[] buyerId;

        public String ipfs;

        public BigInteger timestamp;
    }

    public static class BuyItemEventResponse {
        public Log log;

        public byte[] buyerId;

        public byte[] sellerId;

        public BigInteger day;

        public byte[] itemId;

        public BigInteger quantity;

        public BigInteger amount;

        public BigInteger timestamp;
    }

    public static class AddItemEventResponse {
        public Log log;

        public byte[] itemId;

        public byte[] sellerId;

        public String ipfs;

        public BigInteger price;

        public BigInteger quantity;

        public BigInteger timestamp;
    }

    public static class UpdateItemEventResponse {
        public Log log;

        public byte[] itemId;

        public byte[] sellerId;

        public String ipfs;

        public BigInteger price;

        public BigInteger quantity;

        public BigInteger timestamp;
    }

    public static class TransferTokensEventResponse {
        public Log log;

        public String addr;

        public BigInteger tokens;

        public BigInteger timestamp;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }
}
